name: Build & Push to GHCR + Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image (lowercase)
        id: img
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_LC=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "image=ghcr.io/${OWNER_LC}/${REPO_LC}" >> $GITHUB_OUTPUT
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "Will push: ghcr.io/${OWNER_LC}/${REPO_LC}:{latest,${{ github.sha }}}"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.img.outputs.image }}:latest
            ${{ steps.img.outputs.image }}:${{ steps.img.outputs.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy (compose pull & up)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            mkdir -p /srv/app
            cd /srv/app
            # если на сервере нет compose-файла — создадим минимальный под твой образ
            if [ ! -f docker-compose.yml ]; then
              cat > docker-compose.yml <<'YAML'
            services:
              passivbot:
                image: ${{ steps.img.outputs.image }}:latest
                restart: unless-stopped
                # при необходимости раскомментируй и настрой:
                # env_file:
                #   - .env
                # volumes:
                #   - ./configs:/app/configs
                #   - ./data:/app/data
                # ports:
                #   - "80:3000"
            YAML
            fi
            docker compose pull
            docker compose up -d
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
